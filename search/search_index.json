{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"<p>Our build system is a framework that allows any project to utilise and automate derivative docker base images via CI Pipelines</p> <p>Without additional work, all users of the project get access to platform agnostic, dev tools, one line commands that are simple and not confusing to document</p>","title":"Host Platform Agnostic Build Tool"},{"location":"#its-easy-they-said","text":"<p>Compiling is easy, it should \"just work\", it says so in the README, it will be fun they said!</p> <p>it's now 10 hours later, you're questioning if you have the IQ to classify as a human, the README has broken your mouse finger... then in confused tiredness you just replaced a system library with a version that breaks your world.</p> <p>Lethean Builder, true to the meaning of \"Lethean\", to forget; is a forgetful &amp; private builder that abstracts all  that geeky stuff for a few reasons: <code>Performance</code>, <code>Security</code> &amp; <code>Compute Reuse (a.k.a being kinder to the planet)</code>.</p> <p>Compiling takes time, uses power, it's also wasteful when repeated for no real reason, the solutions to this are too complicated for laypeople.</p> <p>It's not a simple process, \"ain't nobody got time for that\".</p>","title":"It's easy, they said"},{"location":"#cache-all-the-things","text":"<p>Using our builder, with some adjustments to settings (*future features) we can do a full compile of our blockchain in just under 2 minutes, or about 15 minutes without pushing limits.</p> <p>The layers here enable us to deliver fast builds in an acceptable timeframe, instantiated from a terminal or script, on a framework that can be customised to compile literally anything, all options customisable.</p>","title":"Cache all the things!"},{"location":"#security","text":"<p>When you are compiling code, you are trusting the author of the code to not do something like install a virus.</p> <p>Our builder is an 84 MB Alpine linux image, with an internal builder service that interacts with an internal daemon.</p> <p>Once the task is complete, we run the image and extract the build assets with a simple file copy and store the result of that in the mounted directory.</p> <p>This enables you to run builds with docker in an isolated context, it is not the way to use docker, don't copy my docker abuse, this is a build tool and temporary.</p>","title":"Security"},{"location":"#sharing-is-caring","text":"<p>It is wasteful to ask N+1 users to do the same task, using checksums we can prove if some code is safe to compile or use.</p> <p>If the source checksum and the resulting compile checksum pass validation then why redo what others have already done? </p> <p>Thousands of hours wasted, the project will expand shortly with some new features to address that issue, it's not published yet. </p>","title":"Sharing is caring"},{"location":"developers/","text":"","title":"Setting up a local development environment"},{"location":"developers/#grab-a-developer-checkout","text":"<p>We have a script to download all the code in the project structure on GitLab</p> <p>clone-projects-develop.sh</p> <p>Or just run it below </p> <pre><code>wget -O - https://gitlab.com/lthn.io/resources/-/raw/master/clone-projects-develop.sh | bash\n</code></pre>","title":"Grab a developer checkout"},{"location":"developers/api/","text":"","title":"Api"},{"location":"developers/api/#build","text":"<p>Performs an internal docker build</p> <p>=== \"Command\"</p> <pre><code>``` shell\ndocker run --privileged -v $(pwd):/home/build/dist -it lthn/build build\n```\n</code></pre> <p>=== \"Action\"</p> <pre><code>``` dockerfile\ndocker build -f \"$(DOCKER_FILE)\" -t \"$(DOCKER_IMAGE)\" src || exit\n```\n</code></pre>","title":"build"},{"location":"developers/api/#build-git","text":"<p>Builds a internal docker image from git url</p> <p>=== \"Command\"</p> <pre><code>``` shell\ndocker run --privileged -v $(pwd):/home/build/dist -it lthn/build build-git\n```\n</code></pre> <p>=== \"Action\"</p> <pre><code>``` dockerfile\ndocker build -t \"$(DOCKER_IMAGE)\" ${BUILD_GIT_REPO} || exit\n```\n</code></pre>","title":"build-git"},{"location":"developers/api/#compile-git","text":"<p>This never gets called direct, runs a <code>make</code> on the folder src which has been pre cloned by the builds at this point.</p> <p>=== \"Command\"</p> <pre><code>``` shell\ndocker run --privileged -v $(pwd):/home/build/dist -it lthn/build compile-git\n```\n</code></pre> <p>=== \"Action\"</p> <pre><code>``` dockerfile\ndocker build -f \"$(DOCKER_FILE)\" -t \"$(DOCKER_IMAGE)\" src || exit\n```\n</code></pre>","title":"compile-git"},{"location":"developers/api/#eject-build","text":"<p>Takes the build result and extracts the files.</p> <p>=== \"Command\"</p> <pre><code>``` shell\ndocker run --privileged -v $(pwd):/home/build/dist -it lthn/build eject-build\n```\n</code></pre> <p>=== \"Action\"</p> <pre><code>``` dockerfile\ndocker run --name \"$(DOCKER_NAME_NORMALISED)\" -d \"$(DOCKER_IMAGE)\"\ndocker cp \"$(DOCKER_NAME_NORMALISED)\":\"$(BUILD_RESULT_PATH)\" ./dist\ndocker stop \"$(DOCKER_NAME_NORMALISED)\"\ndocker rm \"$(DOCKER_NAME_NORMALISED)\" &amp;&amp; docker rmi \"$(DOCKER_IMAGE)\"\necho \"Ejected Build to ${BUILD_RESULT_PATH}\"\n```\n</code></pre>","title":"eject-build"},{"location":"developers/api/#run-docker","text":"<p>=== \"Command\"</p> <pre><code>``` shell\ndocker run --privileged -v $(pwd):/home/build/dist -it lthn/build run-docker\n```\n</code></pre> <p>=== \"Action\"</p> <pre><code>``` dockerfile\ndocker run --name \"$(DOCKER_NAME_NORMALISED)\" -d \"$(DOCKER_IMAGE)\"\n```\n</code></pre>","title":"run-docker"},{"location":"developers/api/#stop-docker","text":"<p>=== \"Command\"</p> <pre><code>``` shell\ndocker run --privileged -v $(pwd):/home/build/dist -it lthn/build stop-docker\n```\n</code></pre> <p>=== \"Action\"</p> <pre><code>``` dockerfile\ndocker stop \"$(DOCKER_NAME_NORMALISED)\"\n```\n</code></pre>","title":"stop-docker"},{"location":"developers/api/#clean-docker","text":"<p>=== \"Command\"</p> <pre><code>``` shell\ndocker run --privileged -v $(pwd):/home/build/dist -it lthn/build clean-docker\n```\n</code></pre> <p>=== \"Action\"</p> <pre><code>``` dockerfile\ndocker rm \"$(DOCKER_NAME_NORMALISED)\" &amp;&amp; docker rmi \"$(DOCKER_IMAGE)\"\n```\n</code></pre>","title":"clean-docker"},{"location":"developers/api/#eject-docker","text":"<p>=== \"Command\"</p> <pre><code>``` shell\ndocker run --privileged -v $(pwd):/home/build/dist -it lthn/build eject-docker\n```\n</code></pre> <p>=== \"Action\"</p> <pre><code>``` dockerfile\ndocker cp \"$(DOCKER_NAME_NORMALISED)\":\"$(BUILD_RESULT_PATH)\" ./dist\n```\n</code></pre>","title":"eject-docker"},{"location":"developers/api/#check-docker","text":"<p>=== \"Command\"</p> <pre><code>``` shell\ndocker run --privileged -v $(pwd):/home/build/dist -it lthn/build check-docker\n```\n</code></pre> <p>=== \"Action\"</p> <pre><code>``` dockerfile\ndocker stats || exit\n```\n</code></pre>","title":"check-docker"},{"location":"developers/options/","text":"<pre><code>DOCKER_COMPOSE ?= ./src/docker-compose.yml\nDOCKER_FILE ?= ./Dockerfile\nK8_BUILD_DIR ?= ./build-dist/dist/k8\nDOCKER_IMAGE ?= lthn/build\nBUILD_RESULT_PATH ?= /home/build/build\nBUILD_GIT_REPO ?= \"https://gitlab.com/lthn.io/projects/sdk/build.git#master\"\n\n# Internal Behaviour Settings\nDOCKER_NAME_NORMALISED ?= lthn-$(subst /,-,$(DOCKER_IMAGE))\n</code></pre>","title":"Options"},{"location":"developers/linux/setup/","text":"","title":"Setting up a local development environment"},{"location":"developers/linux/setup/#packages-ubuntu","text":"","title":"Packages Ubuntu"},{"location":"developers/linux/setup/#base-packages","text":"<pre><code>sudo apt install build-essential git apt-transport-https ca-certificates gnupg lsb-release \\\n gcc-mingw-w64-x86-64 cmake\n</code></pre>","title":"Base Packages"},{"location":"developers/linux/setup/#services","text":"","title":"Services"},{"location":"developers/linux/setup/#docker","text":"<pre><code>sudo apt-get remove docker docker-engine docker.io containerd runc\n</code></pre> <pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n</code></pre> <pre><code>echo \\\n  \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n</code></pre> <pre><code>sudo apt-get update\n</code></pre> <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io\n</code></pre> <p>Test a image</p> <pre><code>sudo docker run hello-world\n</code></pre>","title":"Docker"},{"location":"developers/linux/setup/#grab-a-developer-checkout","text":"<p>We have a script to download all the code in the project structure on GitLab</p> <p>clone-projects-develop.sh</p> <p>Or just run it below </p> <pre><code>wget -O - https://gitlab.com/lthn.io/resources/-/raw/master/clone-projects-develop.sh | bash\n</code></pre>","title":"Grab a developer checkout"},{"location":"usage/base-images/","text":"<p>Base images that are slightly more usable.</p>","title":"Base images"},{"location":"usage/base-images/#ubuntu","text":"<p>=== \"16.04\"</p> <pre><code>``` dockerfile\nFROM lthn/build:base-ubuntu-16.04 as build\n\n# Demo Build\nRUN git clone --branch=master --depth=1 https://gitlab.com/lthn.io/projects/chain/lethean.git\n\nWORKDIR /lethean\n\nRUN make release-static\n\nFROM ubuntu:16.04\n\nCOPY --from=build /lethean/build /tmp/build\n\nENTRYPOINT bash \n```\n</code></pre> <p>=== \"18.04\"</p> <pre><code>``` dockerfile\nFROM lthn/build:base-ubuntu-18.04 as build\n\n# Demo Build\nRUN git clone --branch=master --depth=1 https://gitlab.com/lthn.io/projects/chain/lethean.git\n\nWORKDIR /lethean\n\nRUN make release-static\n\nFROM ubuntu:18.04\n\nCOPY --from=build /lethean/build /tmp/build\n\nENTRYPOINT bash \n```\n</code></pre> <p>=== \"20.04\"</p> <pre><code>``` dockerfile\nFROM lthn/build:base-ubuntu-20.04 as build\n\n# Demo Build\nRUN git clone --branch=master --depth=1 https://gitlab.com/lthn.io/projects/chain/lethean.git\n\nWORKDIR /lethean\n\nRUN make release-static\n\nFROM ubuntu:20.04\n\nCOPY --from=build /lethean/build /tmp/build\n\nENTRYPOINT bash \n```\n</code></pre>","title":"Ubuntu"},{"location":"usage/buider/","text":"<p>Compiles the project and copies the build assets to the mount point</p>","title":"Building"},{"location":"usage/buider/#lethean-blockchain","text":"<p>=== \"Windows\"</p> <pre><code>``` shell\ndocker run --privileged -v %cd%:/home/build/dist -it lthn/build lthn/chain\n```\n</code></pre> <p>=== \"Linux\"</p> <pre><code>``` shell\ndocker run --privileged -v $(pwd):/home/build/dist -it lthn/build lthn/chain\n```\n</code></pre> <p>=== \"Mac\"</p> <pre><code>``` shell\ndocker run --privileged -v $(pwd):/home/build/dist -it lthn/build lthn/chain\n```\n</code></pre>","title":"Lethean Blockchain"},{"location":"usage/buider/#compiling-another-project-monero","text":"<p>=== \"Windows\"</p> <pre><code>``` shell\ndocker run --privileged -v %cd%:/home/build/dist -it lthn/build compile https://github.com/monero-project/monero.git\n```\n</code></pre> <p>=== \"Linux\"</p> <pre><code>``` shell\ndocker run --privileged -v $(pwd):/home/build/dist -it lthn/build compile https://github.com/monero-project/monero.git\n```\n</code></pre> <p>=== \"Mac\"</p> <pre><code>``` shell\ndocker run --privileged -v $(pwd):/home/build/dist -it lthn/build compile https://github.com/monero-project/monero.git\n```\n</code></pre>","title":"Compiling Another Project: Monero"}]}